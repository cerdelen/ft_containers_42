/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_stack.hpp                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: cerdelen <cerdelen@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/09/02 14:16:07 by cerdelen          #+#    #+#             */
/*   Updated: 2022/10/26 16:45:46 by cerdelen         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../ft_vector/ft_vector.hpp"

namespace ft
{
	template <class T, class container_type = ft::vector<T> >
	class stack
	{

		typedef 			container_type						Container;
		typedef typename	Container::value_type				value_type;
		typedef typename	Container::size_type				size_type;
		typedef typename	Container::reference				reference;
		typedef typename	Container::const_reference			const_reference;

		private:
			Container		c;
		public:

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//Member functions(declaration only)/////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

		//	Member functions
		//		Constructor
		//		Deconstructor

		//	Element access
		//		top

		//	Capacity
		//		empty
		//		size

		//	Modifiers
		//		push
		//		pop


/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//Member functions///////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

			explicit	stack( const Container& cont = Container() ) : c(cont)
			{
				
			}
			stack( const stack& other )
			{
				*this = other;
			}

			~stack( void )
			{
				
			}

			stack		&operator=( const stack &other)
			{
				c = other.c;
				return (*this);
			}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//Element access/////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

			reference			top( void )
			{
				return (c.back());
			}

			const_reference		top( void ) const
			{
				return (c.back());
			}

/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//Capacity///////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

			bool				empty() const
			{
				return (c.empty());
			}

			size_type			size() const
			{
				return (c.size());
			}


/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
//Modifiers//////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////

			void				push( const value_type& value )
			{
				c.push_back(value);
			}

			void				pop( void )
			{
				c.pop_back();
			}



			friend bool		operator==( const stack &lhs, const stack &rhs)
			{
				return (lhs.c == rhs.c);
			}
			friend bool		operator!=( const stack &lhs, const stack &rhs)
			{
				return (lhs.c != rhs.c);
			}
			friend bool		operator<=( const stack &lhs, const stack &rhs)
			{
				return (lhs.c <= rhs.c);
			}
			friend bool		operator>=( const stack &lhs, const stack &rhs)
			{
				return (lhs.c >= rhs.c);
			}
			friend bool		operator<( const stack &lhs, const stack &rhs)
			{
				return (lhs.c < rhs.c);
			}
			friend bool		operator>( const stack &lhs, const stack &rhs)
			{
				return (lhs.c > rhs.c);
			}

			
	}; // class stack
	
} // namespace ft
